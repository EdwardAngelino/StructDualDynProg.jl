{
    "docs": [
        {
            "location": "/", 
            "text": "StochasticDualDynamicProgramming.jl Documentation\n\n\nThis packages aims at providing an implementation of SDDP that is both efficient and modular/flexible. It features the following:\n\n\n\n\nSupport for unfeasible problem by generating a feasibility cut.\n\n\nSupport for unbounded problem by using an unbounded ray.\n\n\nSupport for a variety of cut pruning algorithm through the \nCutPruners\n package.\n\n\nSupport for any linear or conic solvers available through \nMathProgBase\n; see \nJuliaOpt's webpage\n for a list.\n\n\nSupport modeling the problem using the \nStructJuMP modeling interface\n.\n\n\nSupport specifying the problem using a low-level interface. This is used for example by the \nEntropicCone\n package.\n\n\n\n\nThe \nSDDP\n algorithm can be run from any node of the lattice of problems using the following function:\n\n\nSDDP(root::SDDPNode, num_stages; K::Int, stopcrit::AbstractStoppingCriterion, verbose, pathsel::Symbol, ztol)\n\n\n\n\nThis lattice can be built from a \nStructJuMP\n model using the following function:\n\n\n#\n\n\nStochasticDualDynamicProgramming.model2lattice\n \n \nMethod\n.\n\n\nmodel2lattice(m, num_stages, solver, pruningalgo, cutmode)\nmodel2lattice(m, num_stages, solver, pruningalgo)\nmodel2lattice(m, num_stages, solver, pruningalgo, cutmode, newcut)\n\n\n\n\n\nTransforms a \nStructJuMP\n model \nm\n into a lattice that can be used by the SDDP algorithm.\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nStochasticDualDynamicProgramming.AndStoppingCriterion\n\n\nStochasticDualDynamicProgramming.CutLimit\n\n\nStochasticDualDynamicProgramming.IterLimit\n\n\nStochasticDualDynamicProgramming.OrStoppingCriterion\n\n\nStochasticDualDynamicProgramming.Pereira\n\n\nStochasticDualDynamicProgramming.model2lattice", 
            "title": "Home"
        }, 
        {
            "location": "/#stochasticdualdynamicprogrammingjl-documentation", 
            "text": "This packages aims at providing an implementation of SDDP that is both efficient and modular/flexible. It features the following:   Support for unfeasible problem by generating a feasibility cut.  Support for unbounded problem by using an unbounded ray.  Support for a variety of cut pruning algorithm through the  CutPruners  package.  Support for any linear or conic solvers available through  MathProgBase ; see  JuliaOpt's webpage  for a list.  Support modeling the problem using the  StructJuMP modeling interface .  Support specifying the problem using a low-level interface. This is used for example by the  EntropicCone  package.   The  SDDP  algorithm can be run from any node of the lattice of problems using the following function:  SDDP(root::SDDPNode, num_stages; K::Int, stopcrit::AbstractStoppingCriterion, verbose, pathsel::Symbol, ztol)  This lattice can be built from a  StructJuMP  model using the following function:  #  StochasticDualDynamicProgramming.model2lattice     Method .  model2lattice(m, num_stages, solver, pruningalgo, cutmode)\nmodel2lattice(m, num_stages, solver, pruningalgo)\nmodel2lattice(m, num_stages, solver, pruningalgo, cutmode, newcut)  Transforms a  StructJuMP  model  m  into a lattice that can be used by the SDDP algorithm.  source", 
            "title": "StochasticDualDynamicProgramming.jl Documentation"
        }, 
        {
            "location": "/#index", 
            "text": "StochasticDualDynamicProgramming.AndStoppingCriterion  StochasticDualDynamicProgramming.CutLimit  StochasticDualDynamicProgramming.IterLimit  StochasticDualDynamicProgramming.OrStoppingCriterion  StochasticDualDynamicProgramming.Pereira  StochasticDualDynamicProgramming.model2lattice", 
            "title": "Index"
        }, 
        {
            "location": "/stopcrit/", 
            "text": "Stopping Criterion\n\n\nstop(stopcrit::AbstractStoppingCriterion, iter, nfcuts, nocuts, K, z_LB, z_UB, \u03c3)\nOrStoppingCriterion\nAndStoppingCriterion\nIterLimit\nCutLimit\nPereira", 
            "title": "Stopping Criterion"
        }, 
        {
            "location": "/stopcrit/#stopping-criterion", 
            "text": "stop(stopcrit::AbstractStoppingCriterion, iter, nfcuts, nocuts, K, z_LB, z_UB, \u03c3)\nOrStoppingCriterion\nAndStoppingCriterion\nIterLimit\nCutLimit\nPereira", 
            "title": "Stopping Criterion"
        }
    ]
}